apply plugin: 'maven-publish'

// 读取工程配置
Properties gradleProperties = new Properties()
gradleProperties.load(project.rootProject.file('gradle.properties').newDataInputStream())
def VERSION_NAME = gradleProperties.getProperty("VERSION_NAME")
def POM_URL = gradleProperties.getProperty("POM_URL")
def GROUP_ID = gradleProperties.getProperty("GROUP_ID")

// 读取插件配置
Properties properties = new Properties()
properties.load(project.file('gradle.properties').newDataInputStream())
def POM_ARTIFACT_ID = properties.getProperty("POM_ARTIFACT_ID")
def DESCRIPTION = properties.getProperty("DESCRIPTION")

group = GROUP_ID
//描述信息
description = DESCRIPTION
//插件版本号
version = VERSION_NAME

afterEvaluate {
    publishing {
        publications {

            mavenJava(MavenPublication) {
                //当前插件的名称
                artifactId = POM_ARTIFACT_ID

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def groupId = it.group
                        def artifactId = it.name
                        // If we specify an artifact id that differs from the project name, it won't
                        // match. To avoid that, we look up the artifact id (and group) by property
                        // for any project dependencies.
                        // TODO: there must be a neater way to do this.
                        if (it instanceof ProjectDependency) {
                            def dependencyProperties = it.getDependencyProject().getProperties()
                            groupId = GROUP_ID
                            artifactId = dependencyProperties.get("POM_ARTIFACT_ID")
                        }
                        if(groupId != null && groupId.length() > 0 &&
                                artifactId != null && artifactId.length() > 0){
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', groupId)
                            dependencyNode.appendNode('artifactId', artifactId)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }

                tasks.register('androidSourcesJar', Jar) {
                    archiveClassifier.set('sources')
                    from project.android.sourceSets.main.java.source
                    archiveBaseName.set("${project.name}")
                }

                tasks.register('androidLibraryJar', Jar) {
                    dependsOn compileReleaseJavaWithJavac
                    from compileReleaseJavaWithJavac.destinationDir
                    exclude '**/R.class'
                    exclude '**/R$*.class'
                    archiveBaseName.set("${project.name}")
                }

                artifact androidLibraryJar
                artifact androidSourcesJar
                artifact project.tasks.bundleReleaseAar
            }
        }
        //插件存储库
        repositories {
//            mavenLocal()
            maven {
                // 生成的插件位置
                url = uri("$POM_URL")
            }
        }
    }
}